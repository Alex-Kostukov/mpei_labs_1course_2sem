unit Unit2;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Vcl.ExtCtrls, Vcl.Grids,
  Vcl.Samples.Calendar, Vcl.ComCtrls, System.Win.TaskbarCore, Vcl.Taskbar,
  Vcl.StdCtrls, Vcl.ToolWin, Vcl.AppAnalytics, Vcl.Samples.Gauges;

type
  TForm2 = class(TForm)
    GroupBox1: TGroupBox;
    GroupBox3: TGroupBox;
    GroupBox4: TGroupBox;
    EditXs: TEdit;
    EditXe: TEdit;
    EditYs: TEdit;
    EditYe: TEdit;
    EditBorderLeft: TEdit;
    EditBorderRight: TEdit;
    Edit9: TEdit;
    Edit10: TEdit;
    Edit11: TEdit;
    Edit12: TEdit;
    Edit13: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    RadioGroupFunction: TRadioGroup;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    EditEPS: TEdit;
    EditRate: TEdit;
    ButtonGraph: TButton;
    Button2: TButton;
    Button3: TButton;
    Image: TImage;
    Edit1: TEdit;
    procedure ButtonGraphClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form2: TForm2;

implementation

{$R *.dfm}

type
  func = function(var x: real): real;

var
  origin, size: TPoint;
  graph: boolean = false;

procedure TForm2.ButtonGraphClick(Sender: TObject);
var
  xs, xe, ys, ye, x, y: real;
  f: func;
  hx, hy, i: integer;

begin

  try
    xs := StrToFloat(EditXs.Text);
  except
    ShowMessage('Введите начальное значение по оси X');
    EditXs.SetFocus;
    Exit;
  end;
  try
    xe := StrToFloat(EditXe.Text);
  except
    ShowMessage('Введите конечное значение по оси X');
    EditXe.SetFocus;
    Exit;
  end;
  if xs >= xe then
  begin
    ShowMessage('Начальное значение по оси X должно быть меньше конечного');
    EditXs.SetFocus;
    Exit;
  end;
  try
    ys := StrToFloat(EditYs.Text);
  except
    ShowMessage('Введите начальное значение по оси Y');
    EditYs.SetFocus;
    Exit;
  end;
  try
    ye := StrToFloat(EditYe.Text);
  except
    ShowMessage('Введите конечное значение по оси Y');
    EditYe.SetFocus;
    Exit;
  end;
  if ys >= ye then
  begin
    ShowMessage('Начальное значение по оси Y должно быть меньше конечного');
    EditYs.SetFocus;
    Exit;
  end;
  if RadioGroupFunction.ItemIndex = -1 then
  begin
    ShowMessage('Выберите функцию');
    RadioGroupFunction.SetFocus;
    Exit;
  end
  else if RadioGroupFunction.ItemIndex = 0 then
    // f := f1   - Заменить
  else
    // f := f2;    - Заменить
    graph := true;
  Image.canvas.Pen.Color := Image.canvas.Brush.Color;
  Image.canvas.Rectangle(0, 0, Image.Width, Image.Height);
  Image.canvas.Pen.Color := clGray;
  Image.canvas.Pen.Style := psDash;
  for i := 1 to 10 do
  begin
    Image.canvas.MoveTo(origin.x + size.x div 10 * i, origin.y + 5);
    Image.canvas.LineTo(origin.x + size.x div 10 * i, origin.y - size.y);
    Image.canvas.MoveTo(origin.x - 5, origin.y - size.y div 10 * i);
    Image.canvas.LineTo(origin.x + size.x, origin.y - size.y div 10 * i);
  end;
  Image.canvas.Pen.Color := clBlack;
  Image.canvas.Pen.Style := psSolid;
  Image.canvas.MoveTo(origin.x, origin.y + 5);
  Image.canvas.LineTo(origin.x, origin.y - size.y);
  Image.canvas.MoveTo(origin.x - 5, origin.y);
  Image.canvas.LineTo(origin.x + size.x, origin.y);
  x := xs;
  y := ys;
  for i := 0 to 10 do
  begin
    Image.canvas.TextOut(origin.x + size.x div 10 * i - 5, origin.y + 7,
      FloatToStrF(x, ffFixed, 2, 2));
    Image.canvas.TextOut(origin.x - 27, origin.y - size.y div 10 * i - 5,
      FloatToStrF(y, ffFixed, 2, 2));
    x := x + (xe - xs) / 10;
    y := y + (ye - ys) / 10;
  end;
  hx := trunc(size.x / (xe - xs));
  hy := trunc(size.y / (ys - ye));
  Image.canvas.Pen.Color := clRed;
  Image.canvas.MoveTo(origin.x, trunc(origin.y + (f(xs) - ys) * hy));
  x := xs + (xe - xs) / 1000;
  for i := 1 to 1000 do
  begin
    y := f(x);
    Image.canvas.LineTo(trunc(origin.x + (x - xs) * hx),
      trunc(origin.y + (y - ys) * hy));
    x := x + (xe - xs) / 1000;
  end;
end;

end.
